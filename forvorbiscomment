#!/bin/bash

# A script to interactively provide metadata for a comment on all Ogg Vorbis files in a directory, generally used for songs downloaded from YouTube because they don't have metadata. This is in place of doing it manually in Rhythmbox or another music player.

#Exit on errors
set -e

# For now this will still ask for some information but in the future will probably call another script to interface with the Discogs API
default_variables() {
	echo "Track total: $tracktotal"

	disctotal=1
	echo "Disc total: $disctotal"
	
	# Get artist from one directory back
	ask_artist=false
	artist=$(echo "$PWD" | awk -F/ '{print $(NF-1)}')
	echo "Artist: $artist"

	# Get album from current directory
	ask_album=false
	album=$(echo "$PWD" | awk -F/ '{print $NF}')
	echo "Album: $album"

	ask_year=false	
	read -p "Year: " year

	ask_genre=false
	read -p "Genre: " genre

	ask_tracknum=true
	
	ask_title=false
}

#Find global values for all files by asking user
get_globals() {
	read -p "Is there one disc? (Y/n) " single_disc
	case $single_disc in
		n|N) read -p "How many discs in total? " disctotal;;
		*) disctotal=1;;
	esac

	read -p "Is there one artist? (Y/n) " single_artist
	case $single_artist in
		n|N) ask_artist=true;;
		*) ask_artist=false;;
	esac
	
	read -p "Is there one album? (Y/n) " single_album
	case $single_album in
		n|N) ask_album=true;;
		*) ask_album=false;;
	esac
	
	read -p "Is there one year? (Y/n) " single_year
	case $single_year in
		n|N) ask_year=true;;
		*) ask_year=false;;
	esac

	read -p "Is there one genre? (Y/n) " single_genre
	case $single_genre in
		n|N) ask_genre=true;;
		*) ask_genre=false;;
	esac

	read -p "Are files sequential by track number? (y/N) " sequential
	case $sequential in
		y|Y) ask_tracknum=false;;
		*) ask_tracknum=true;;
	esac

	read -p "Should Title be file name? (Y/n) " title_as_file
	case $title_as_file in
		n|N) ask_title=true;;
		*) ask_title=false;;
	esac

	if [ $ask_year = false ]; then
		read -p "Year: " year
	fi

	if [ $ask_artist = false ]; then
		read -p "Artist: " artist
	fi

	if [ $ask_album = false ]; then
		read -p "Album: " album
	fi

	if [ $ask_genre = false ]; then
		read -p "Genre: " genre
	fi
}

#Ask user for values that change between files, called by comment()
get_comments() {
	if [ $ask_title = true ]; then
		read -p "Title: " title
	fi

	if [ $ask_year = true ]; then
		read -p "Year: " year
	fi

	if [ $ask_tracknum = true ]; then
		read -p "Track Number: " tracknumber
	fi
	
	if [ $disctotal -ne 1 ]; then
		read -p "Disc Number: " discnumber
	else
		discnumber=1
	fi

	if [ $ask_artist = true ]; then
		read -p "Artist: " artist
	fi
	
	if [ $ask_album = true ]; then
		read -p "Album: " album
	fi

	if [ $ask_genre = true ]; then
		read -p "Genre: " genre
	fi
}

yt_trim() {
	if [[ "$1" == *"["*"]" ]]; then # does nothing if title does not end with brackets
		title=$(echo "$1" | rev | cut -d ' ' -f1 --complement -s | rev | sed -e 's/_/\//g' -e 's/â§¸/\//g') # reverses title, keeps everything but first field (i.e., the brackets) then un-reverses title. Any underscores and false slashes are turned into slashes.
	fi
}

comment() {
	# Set a default track number in case files are sequential
	tracknumber=1
	for file in *.ogg; do
		echo "File: $file"
		
		#Get user-inputted values
		get_comments

		#If we don't ask user for title, make it file name (exclude file extensions)
		if [ $ask_title = false ]; then
			title=$(echo "$file" | sed 's/\.[^.]*$//')
			if [ $yt_format = true ]; then
				yt_trim "$title"
			fi
		fi
	
		#Make the comment
		vorbiscomment -w "$file" \
			-t "TITLE=$title" \
			-t "DATE=$year" \
			-t "TRACKNUMBER=$tracknumber" \
			-t "TRACKTOTAL=$tracktotal" \
			-t "DISCNUMBER=$discnumber" \
			-t "DISCTOTAL=$disctotal" \
			-t "ARTIST=$artist" \
			-t "ALBUM=$album" \
			-t "GENRE=$genre"

		#Only increment track number if files are sequential
		if [ $ask_tracknum = false ]; then
			tracknumber=$((tracknumber+1))
		fi
	done
}

# Get global variables (or defaults), do the for loop then exit

help_message="Valid arguments are:\n\t-d, --defaults\t\t| Use the default values of the script (default option, conflicts with --interactive)\n\t-h, --help\t\t| Print these options\n\t-i, --interactive\t| Manually define values for metadata; choose which values are global and local to each file (conflicts with defaults)\n\t-y, --yt-format\t\t| If files were downloaded with yt-dlp, automatically trims the bracket part out of the track name. Does nothing if used with --interactive or with a file that does not have this. However, if you set this option and the file name ends in [...] or [...].ogg it will cut out those brackets (be careful!)"

# Loops through arguments and exits on conflicting values. This is not its own function because all script arguments have to then be passed to it to work and it's getting executed at the end of all other function definitions anyway.
args=("$@")

# Make interactive false by default so that it can be turned on if needed and other options can be passed to the script without having to specify --defaults
interactive=false
yt_format=false

# uses 1st argument by shifting at end until no args remain
for a in "${args[@]}"; do
	case $a in
		-i|--interactive) interactive=true;;
		-y|--yt-format) yt_format=true;;
		#If any of the passed arguments are -h/--help, then just do that
		-h|--help) echo -e "Use in a directory with .ogg files.\nUsage: forvorbiscomment [arguments]\n$help_message" && exit 0;;
		""|-d|--defaults) defaults=true;; #make defaults true solely to test if both -i and -d were passed
		#If a wrong option is passed, tell the user which one and print help message.
		*) echo -e "Error: option $a is not recognized.\n$help_message" && exit 1;;
	esac
done

#If there are no ogg files, exit the script
for file in *.ogg; do
	if [ "${file}" = "*.ogg" ]; then # When there are no files matching a wildcard, the output is the wildcard, so check for that to know there are no files
		echo "Error: no files found. Please execute in a directory with .ogg files." && exit 1
	fi
done

#Set tracktotal here so comment() has it if it is not overwritten by interactive mode
tracktotal=$(ls *.ogg | wc -l)

#tests for conflicting values 
if [[ $defaults = true && $interactive = true ]]; then
	echo -e "Error: --defaults and --interactive cannot both be passed to the script. Please use only one.\n$help_message" && exit 1
fi

#Does arguments
if [ $interactive = true ]; then
	get_globals
else
	# doesn't use defaults = true because -y or others can be passed to the script without specifying defaults = true and it's easier to not have to specify that it should be false if -i is passed
	default_variables
fi

comment
exit 0
